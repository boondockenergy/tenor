#![doc = "Peripheral access API for SOC microcontrollers (generated using svd2rust v0.26.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.26.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn UART();
    fn TIMER0();
    fn TIMER1();
    fn ETHMAC();
    fn DMATEST();
    fn TMU();
    fn SDIRQ();
}
#[doc(hidden)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 7] = [
    Vector { _handler: UART },
    Vector { _handler: TIMER0 },
    Vector { _handler: TIMER1 },
    Vector { _handler: ETHMAC },
    Vector { _handler: DMATEST },
    Vector { _handler: TMU },
    Vector { _handler: SDIRQ },
];
#[doc(hidden)]
pub mod interrupt;
pub use self::interrupt::Interrupt;
#[doc = "CTRL"]
pub struct CTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CTRL {}
impl CTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ctrl::RegisterBlock = 0xf000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CTRL {
    type Target = ctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CTRL").finish()
    }
}
#[doc = "CTRL"]
pub mod ctrl;
#[doc = "DDRPHY"]
pub struct DDRPHY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DDRPHY {}
impl DDRPHY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ddrphy::RegisterBlock = 0xf000_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ddrphy::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DDRPHY {
    type Target = ddrphy::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DDRPHY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DDRPHY").finish()
    }
}
#[doc = "DDRPHY"]
pub mod ddrphy;
#[doc = "DMATEST"]
pub struct DMATEST {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DMATEST {}
impl DMATEST {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dmatest::RegisterBlock = 0xf000_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dmatest::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DMATEST {
    type Target = dmatest::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DMATEST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMATEST").finish()
    }
}
#[doc = "DMATEST"]
pub mod dmatest;
#[doc = "ETHMAC"]
pub struct ETHMAC {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ETHMAC {}
impl ETHMAC {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ethmac::RegisterBlock = 0xf000_1800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ethmac::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ETHMAC {
    type Target = ethmac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ETHMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHMAC").finish()
    }
}
#[doc = "ETHMAC"]
pub mod ethmac;
#[doc = "ETHPHY"]
pub struct ETHPHY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ETHPHY {}
impl ETHPHY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ethphy::RegisterBlock = 0xf000_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ethphy::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ETHPHY {
    type Target = ethphy::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ETHPHY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHPHY").finish()
    }
}
#[doc = "ETHPHY"]
pub mod ethphy;
#[doc = "IDENTIFIER_MEM"]
pub struct IDENTIFIER_MEM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IDENTIFIER_MEM {}
impl IDENTIFIER_MEM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const identifier_mem::RegisterBlock = 0xf000_2800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const identifier_mem::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IDENTIFIER_MEM {
    type Target = identifier_mem::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IDENTIFIER_MEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IDENTIFIER_MEM").finish()
    }
}
#[doc = "IDENTIFIER_MEM"]
pub mod identifier_mem;
#[doc = "LEDS"]
pub struct LEDS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LEDS {}
impl LEDS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const leds::RegisterBlock = 0xf000_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const leds::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LEDS {
    type Target = leds::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LEDS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LEDS").finish()
    }
}
#[doc = "LEDS"]
pub mod leds;
#[doc = "OLED"]
pub struct OLED {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for OLED {}
impl OLED {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const oled::RegisterBlock = 0xf000_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const oled::RegisterBlock {
        Self::PTR
    }
}
impl Deref for OLED {
    type Target = oled::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for OLED {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OLED").finish()
    }
}
#[doc = "OLED"]
pub mod oled;
#[doc = "SDBLOCK2MEM"]
pub struct SDBLOCK2MEM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDBLOCK2MEM {}
impl SDBLOCK2MEM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdblock2mem::RegisterBlock = 0xf000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdblock2mem::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDBLOCK2MEM {
    type Target = sdblock2mem::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDBLOCK2MEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDBLOCK2MEM").finish()
    }
}
#[doc = "SDBLOCK2MEM"]
pub mod sdblock2mem;
#[doc = "SDCORE"]
pub struct SDCORE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDCORE {}
impl SDCORE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdcore::RegisterBlock = 0xf000_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdcore::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDCORE {
    type Target = sdcore::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDCORE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDCORE").finish()
    }
}
#[doc = "SDCORE"]
pub mod sdcore;
#[doc = "SDIRQ"]
pub struct SDIRQ {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDIRQ {}
impl SDIRQ {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdirq::RegisterBlock = 0xf000_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdirq::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDIRQ {
    type Target = sdirq::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDIRQ {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDIRQ").finish()
    }
}
#[doc = "SDIRQ"]
pub mod sdirq;
#[doc = "SDMEM2BLOCK"]
pub struct SDMEM2BLOCK {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDMEM2BLOCK {}
impl SDMEM2BLOCK {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdmem2block::RegisterBlock = 0xf000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdmem2block::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDMEM2BLOCK {
    type Target = sdmem2block::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDMEM2BLOCK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMEM2BLOCK").finish()
    }
}
#[doc = "SDMEM2BLOCK"]
pub mod sdmem2block;
#[doc = "SDPHY"]
pub struct SDPHY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDPHY {}
impl SDPHY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdphy::RegisterBlock = 0xf000_6000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdphy::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDPHY {
    type Target = sdphy::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDPHY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDPHY").finish()
    }
}
#[doc = "SDPHY"]
pub mod sdphy;
#[doc = "SDRAM"]
pub struct SDRAM {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SDRAM {}
impl SDRAM {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdram::RegisterBlock = 0xf000_6800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdram::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SDRAM {
    type Target = sdram::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SDRAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDRAM").finish()
    }
}
#[doc = "SDRAM"]
pub mod sdram;
#[doc = "SPIFLASH_CORE"]
pub struct SPIFLASH_CORE {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPIFLASH_CORE {}
impl SPIFLASH_CORE {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spiflash_core::RegisterBlock = 0xf000_7000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spiflash_core::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPIFLASH_CORE {
    type Target = spiflash_core::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPIFLASH_CORE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPIFLASH_CORE").finish()
    }
}
#[doc = "SPIFLASH_CORE"]
pub mod spiflash_core;
#[doc = "SPIFLASH_PHY"]
pub struct SPIFLASH_PHY {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SPIFLASH_PHY {}
impl SPIFLASH_PHY {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spiflash_phy::RegisterBlock = 0xf000_7800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spiflash_phy::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SPIFLASH_PHY {
    type Target = spiflash_phy::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SPIFLASH_PHY {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPIFLASH_PHY").finish()
    }
}
#[doc = "SPIFLASH_PHY"]
pub mod spiflash_phy;
#[doc = "STEMMA"]
pub struct STEMMA {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for STEMMA {}
impl STEMMA {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const stemma::RegisterBlock = 0xf000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const stemma::RegisterBlock {
        Self::PTR
    }
}
impl Deref for STEMMA {
    type Target = stemma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for STEMMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("STEMMA").finish()
    }
}
#[doc = "STEMMA"]
pub mod stemma;
#[doc = "TIMER0"]
pub struct TIMER0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER0 {}
impl TIMER0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer0::RegisterBlock = 0xf000_8800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer0::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER0 {
    type Target = timer0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER0").finish()
    }
}
#[doc = "TIMER0"]
pub mod timer0;
#[doc = "TIMER1"]
pub struct TIMER1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER1 {}
impl TIMER1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1::RegisterBlock = 0xf000_9000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER1 {
    type Target = timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER1").finish()
    }
}
#[doc = "TIMER1"]
pub mod timer1;
#[doc = "TMU"]
pub struct TMU {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TMU {}
impl TMU {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmu::RegisterBlock = 0xf000_9800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmu::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TMU {
    type Target = tmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TMU").finish()
    }
}
#[doc = "TMU"]
pub mod tmu;
#[doc = "UART"]
pub struct UART {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for UART {}
impl UART {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart::RegisterBlock = 0xf000_a000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart::RegisterBlock {
        Self::PTR
    }
}
impl Deref for UART {
    type Target = uart::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for UART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART").finish()
    }
}
#[doc = "UART"]
pub mod uart;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "CTRL"]
    pub CTRL: CTRL,
    #[doc = "DDRPHY"]
    pub DDRPHY: DDRPHY,
    #[doc = "DMATEST"]
    pub DMATEST: DMATEST,
    #[doc = "ETHMAC"]
    pub ETHMAC: ETHMAC,
    #[doc = "ETHPHY"]
    pub ETHPHY: ETHPHY,
    #[doc = "IDENTIFIER_MEM"]
    pub IDENTIFIER_MEM: IDENTIFIER_MEM,
    #[doc = "LEDS"]
    pub LEDS: LEDS,
    #[doc = "OLED"]
    pub OLED: OLED,
    #[doc = "SDBLOCK2MEM"]
    pub SDBLOCK2MEM: SDBLOCK2MEM,
    #[doc = "SDCORE"]
    pub SDCORE: SDCORE,
    #[doc = "SDIRQ"]
    pub SDIRQ: SDIRQ,
    #[doc = "SDMEM2BLOCK"]
    pub SDMEM2BLOCK: SDMEM2BLOCK,
    #[doc = "SDPHY"]
    pub SDPHY: SDPHY,
    #[doc = "SDRAM"]
    pub SDRAM: SDRAM,
    #[doc = "SPIFLASH_CORE"]
    pub SPIFLASH_CORE: SPIFLASH_CORE,
    #[doc = "SPIFLASH_PHY"]
    pub SPIFLASH_PHY: SPIFLASH_PHY,
    #[doc = "STEMMA"]
    pub STEMMA: STEMMA,
    #[doc = "TIMER0"]
    pub TIMER0: TIMER0,
    #[doc = "TIMER1"]
    pub TIMER1: TIMER1,
    #[doc = "TMU"]
    pub TMU: TMU,
    #[doc = "UART"]
    pub UART: UART,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            CTRL: CTRL {
                _marker: PhantomData,
            },
            DDRPHY: DDRPHY {
                _marker: PhantomData,
            },
            DMATEST: DMATEST {
                _marker: PhantomData,
            },
            ETHMAC: ETHMAC {
                _marker: PhantomData,
            },
            ETHPHY: ETHPHY {
                _marker: PhantomData,
            },
            IDENTIFIER_MEM: IDENTIFIER_MEM {
                _marker: PhantomData,
            },
            LEDS: LEDS {
                _marker: PhantomData,
            },
            OLED: OLED {
                _marker: PhantomData,
            },
            SDBLOCK2MEM: SDBLOCK2MEM {
                _marker: PhantomData,
            },
            SDCORE: SDCORE {
                _marker: PhantomData,
            },
            SDIRQ: SDIRQ {
                _marker: PhantomData,
            },
            SDMEM2BLOCK: SDMEM2BLOCK {
                _marker: PhantomData,
            },
            SDPHY: SDPHY {
                _marker: PhantomData,
            },
            SDRAM: SDRAM {
                _marker: PhantomData,
            },
            SPIFLASH_CORE: SPIFLASH_CORE {
                _marker: PhantomData,
            },
            SPIFLASH_PHY: SPIFLASH_PHY {
                _marker: PhantomData,
            },
            STEMMA: STEMMA {
                _marker: PhantomData,
            },
            TIMER0: TIMER0 {
                _marker: PhantomData,
            },
            TIMER1: TIMER1 {
                _marker: PhantomData,
            },
            TMU: TMU {
                _marker: PhantomData,
            },
            UART: UART {
                _marker: PhantomData,
            },
        }
    }
}
